// <auto-generated />
using dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace dal.Migrations
{
    [DbContext(typeof(RCBenevoleContext))]
    partial class RCBenevoleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("dal.models.Adresse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdresseLigne1")
                        .IsRequired();

                    b.Property<string>("AdresseLigne2");

                    b.Property<string>("AdresseLigne3");

                    b.Property<int>("BenevoleID");

                    b.Property<int>("CentreID");

                    b.Property<string>("CodePostal")
                        .IsRequired();

                    b.Property<DateTime>("DateChangement");

                    b.Property<decimal>("DistanceCentre");

                    b.Property<bool>("IsCurrent");

                    b.Property<string>("Ville")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CentreID");

                    b.HasIndex("BenevoleID", "DateChangement")
                        .IsUnique();

                    b.ToTable("Adresse");
                });

            modelBuilder.Entity("dal.models.Benevole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.Property<string>("Prenom")
                        .IsRequired();

                    b.Property<string>("Telephone")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Nom", "Prenom");

                    b.ToTable("Benevoles");
                });

            modelBuilder.Entity("dal.models.Centre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse")
                        .IsRequired();

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.Property<int>("SiegeID");

                    b.HasKey("ID");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.HasIndex("SiegeID");

                    b.ToTable("Centres");
                });

            modelBuilder.Entity("dal.models.Frais", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Annee");

                    b.Property<decimal>("TauxKilometrique");

                    b.HasKey("ID");

                    b.HasIndex("Annee")
                        .IsUnique();

                    b.ToTable("Frais");
                });

            modelBuilder.Entity("dal.models.Pointage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdresseID");

                    b.Property<int>("BenevoleID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("NbDemiJournees");

                    b.HasKey("ID");

                    b.HasIndex("AdresseID");

                    b.HasIndex("BenevoleID", "Date")
                        .IsUnique();

                    b.ToTable("Pointages");
                });

            modelBuilder.Entity("dal.models.Siege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adresse")
                        .IsRequired();

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("Nom")
                        .IsUnique();

                    b.ToTable("Sieges");
                });

            modelBuilder.Entity("dal.models.Utilisateur", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CentreID");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CentreID");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("dal.models.Adresse", b =>
                {
                    b.HasOne("dal.models.Benevole", "Benevole")
                        .WithMany("Adresses")
                        .HasForeignKey("BenevoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dal.models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("dal.models.Centre", b =>
                {
                    b.HasOne("dal.models.Siege", "Siege")
                        .WithMany("Centres")
                        .HasForeignKey("SiegeID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("dal.models.Pointage", b =>
                {
                    b.HasOne("dal.models.Adresse", "Adresse")
                        .WithMany()
                        .HasForeignKey("AdresseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("dal.models.Benevole", "Benevole")
                        .WithMany("Pointages")
                        .HasForeignKey("BenevoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("dal.models.Utilisateur", b =>
                {
                    b.HasOne("dal.models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
